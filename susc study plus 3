오늘은 정보 전달을 위주로 공부

https://docs.google.com/presentation/d/1mI6incZcqdAwZI8-xTW-lNVIgwfjP5PupFDSUnKoMrE/edit#slide=id.g2ba1ccb283d_0_80

https://www.linkedin.com/pulse/susc-nestjs-study-5%25EC%25A3%25BC%25EC%25B0%25A8-%25ED%2586%25A0%25EC%259A%2594%25EC%259D%25BC-%25EC%259E%25A5%25EC%2598%2588%25EB%25A0%25B9-%25EC%259E%25AC%25ED%2595%2599-%25EC%25BB%25B4%25ED%2593%25A8%25ED%2584%25B0%25EA%25B3%25B5%25ED%2595%2599%25EB%25B6%2580--uaffc/

해시 목록들을 레인보우 테이블을 통해 확인할 수 있는데 이 테이블은 해시 함수를 만들어준다. 
문제점 : 흔히 사용되는 비밀번호들은 크랙스테이션에 돌리면 바로 걸리게 된다 > 솔트를 쳐줘야한다. 버려지는 요소들을 무작위로 착착 뿌려주는 것이다.
또는 해시 함수를 여러 번 돌리면(레이보우 테이블을) 안 뚫린다! 
32바이트 짜리 랜덤한 애를 만들고 넣어주는걸 볼 수 있지
합친 것을 sha256으로 해싱하면 > 솔트 치기 완료

남은 시간은 API를 파보자

목록 조회 api를 보자
데이터의 양이 많아질 수록 조회하기 어렵다.
조건들이 몇 개 붙어도 어렵다.(데이터 간의 관계가 생기면 어려워진다.) 
페이지네이션
: 페이지화 한다.
1페이지, 2페이지 선택 
무한 스크롤을 할 때 등 사용

옵셋과 리밋은 파라미터
사용하지 않는 페이지 조차 들고와서 스킵을 하니까 계산과 메모리 낭비가 심하다.
스킵한 데이터가 많아질수록 매우 비 효율적이게 된다.
양이 적거나 무한 x 유한한 양(적은 양)일 때 사용한다.
조건에 맞는 모든 데이터를 불러오는 것은 아님 
커서와 리밋은 파라미터
커서는 결국 마지막 조회한 데이터의 커서 부터 뒤를 보는 것이기 때문에 뒷 내용이 항상 동일 해야 한다.
중요 : 일반적으로 정렬을 필요로 한다. > 어떤 위치에 커서를 찍어도 그 뒤는 항상 동일하다.
앞의 데이터를 안 본다는 것은 효율적
구현이 어렵고 각 페이지에 바로 접근이 불가
예) 20페이지를 보고싶다
: 옵셋은 뛰어 넘어야 하는 페이지 개수도 알고 20페이지가 어디 있는지 알 수 있다 (몇 페이지를 뛰어넘어야 20 페이지가 나왔는지 안다.)
무한 스크롤 : 페이지 컨트롤 x 페이지 바로 접근할 일이 x

: 커서 베이스는 데이터가 여러 개 있을 거 아님?
이때 중요한건 커서

3페이지에 가고 싶은데 지금 1페이지에 있다면 반드시 2를 거쳐서 가야한다.
(링크드 베이스드 생각해보기 > 노드 위치를 알면 ok 모르면 하나하나 봐야 하는 거지) 
따라서 원하는 페이지에 바로 접근이 불가능하다는 것이 이 말이야.

우리는 옵셋 베이스드를 사용 > 구현이 쉽기 때문이다.

위 사진 여기가 레퍼지토리

글 목록 조회 api를 구현
글 엔티티 구현하기
post/entities
post/entities.ts
만들어서 위의 내용들을 넣어줌 
이러면 post 엔티티를 만든거임

2. 데베에서 글 목록을 조회하는 서비스를 만든다.

services
post.services.ts 을 만들고
필수 요소들을 구현해준다
리스트포스트
인젝터블 ...
데이터 베이스에서 글 목록을 조회해올 수 있다.
데베에 대한 의존도를 낮춰주는 효과가 있다.

3. 디비에서 글 목록을 조회하는 서비스 구현하기 2

views
post.views.ts 을 만들고
필수 요소를 넣는다
포스트 리스트 뷰
서비스에 포스트 개수 가져오기, 포스트 가져오기 코드 추가 해준다.
>findandcount 함수(?)를 사용해도 된다.

4. api와 연결해줄 컨트롤러 연결하기

controller
post.controller.ts 를만들고

앞에 만든 서비스 가져오기
api 구현하기 (GET)
...
parseIntpipe
문자로 들어오는 내용을 정수로 바꿔줌 > 숫자가 안 들어오면 에러가 나기 때문에 바꿔줘야 함 
*음수나 엄청 큰 값이 들어오는 경우
: 막아야지! 유효성 검사를 통해서 막을 수 있다.
다음 시간에 다룸

모듈을 만들어주네

5. 테스트 데이터 집어 넣기



하나의 데이터를 불러와 ~ 이랬더니 가져옴!

마성의 cors에러
주소가 다른 위치의 서버로부터 가져온다는 것이 문제가 된다. 우리는 백엔드라서 간단히 해결 가능
> enablecors를 추가해주면 된다.
*에러가 좀 있지만 프론트 문제이므로 패스
